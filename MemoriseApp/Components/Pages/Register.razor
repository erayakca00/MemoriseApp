@page "/register"
@layout AuthLayout // Eğer varsa
@using MemoriseApp.Services
@using MemoriseApp.Models 
@using System.ComponentModel.DataAnnotations
@rendermode InteractiveServer
@inject IUserService UserService
@inject NavigationManager NavigationManager

<PageTitle>Kayıt Ol</PageTitle>

<div class="row justify-content-center mt-5">
    <div class="col-md-6 col-lg-4">
        <div class="card shadow">
            <div class="card-header bg-success text-white text-center">
                <h4>Yeni Hesap Oluştur</h4>
            </div>
            <div class="card-body">
                <EditForm Model="@registerModel" OnValidSubmit="HandleRegistration" FormName="RegisterUserForm">
                    <DataAnnotationsValidator />
                    @* <ValidationSummary /> *@ @* Hataları toplu göstermek isterseniz *@

                    @if (registrationErrors.Any())
                    {
                        <div class="alert alert-danger" role="alert">
                            <p>Kayıt sırasında aşağıdaki hatalar oluştu:</p>
                            <ul>
                                @foreach (var error in registrationErrors)
                                {
                                    <li>@error</li>
                                }
                            </ul>
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success" role="alert">
                            @successMessage
                        </div>
                    }

                    <div class="mb-3">
                        <label for="username" class="form-label">Kullanıcı Adı</label>
                        <InputText @bind-Value="registerModel.Username" class="form-control" id="username" placeholder="Kullanıcı adınızı seçin" />
                        <ValidationMessage For="@(() => registerModel.Username)" />
                    </div>

                    <div class="mb-3">
                        <label for="email" class="form-label">Email</label>
                        <InputText @bind-Value="registerModel.Email" type="email" class="form-control" id="email" placeholder="E-posta adresiniz" />
                        <ValidationMessage For="@(() => registerModel.Email)" />
                    </div>

                    <div class="mb-3">
                        <label for="password" class="form-label">Şifre</label>
                        <InputText @bind-Value="registerModel.Password" type="password" class="form-control" id="password" placeholder="Güçlü bir şifre seçin" />
                        <ValidationMessage For="@(() => registerModel.Password)" />
                    </div>

                    <div class="mb-3">
                        <label for="confirmPassword" class="form-label">Şifre Doğrulama</label>
                        <InputText @bind-Value="registerModel.ConfirmPassword" type="password" class="form-control" id="confirmPassword" placeholder="Şifrenizi tekrar girin" />
                        <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
                    </div>

                    <div class="d-grid">
                        <button type="submit" class="btn btn-success" disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                <span> Kayıt Olunuyor...</span>
                            }
                            else
                            {
                                <span>Kayıt Ol</span>
                            }
                        </button>
                    </div>
                </EditForm>
            </div>
            <div class="card-footer text-center">
                <small>Zaten bir hesabınız var mı? <a href="/login">Giriş Yapın</a></small>
            </div>
        </div>
    </div>
</div>

@code {
    private readonly RegisterModel registerModel = new RegisterModel();
    private readonly List<string> registrationErrors = new List<string>();
    private string? successMessage;
    private bool isLoading = false;

    private async Task HandleRegistration()
    {
        isLoading = true;
        registrationErrors.Clear();
        successMessage = null;
        StateHasChanged();

        try
        {
            // UserService'teki RegisterUserAsync metodunu çağır
            var result = await UserService.RegisterUserAsync(
                registerModel.Username,
                registerModel.Email,
                registerModel.Password
            );

            if (result.Succeeded)
            {
                successMessage = "Kayıt başarılı! Artık giriş yapabilirsiniz.";
                Console.WriteLine("Kayıt başarılı!");
                // İsteğe bağlı: Kullanıcıyı giriş sayfasına yönlendir veya otomatik giriş yaptır.
                // Şimdilik sadece mesaj gösterelim.
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                registrationErrors.AddRange(result.Errors);
                Console.WriteLine("Kayıt başarısız:");
                foreach (var error in result.Errors)
                {
                    Console.WriteLine($"- {error}");
                }
            }
        }
        catch (Exception ex)
        {
            registrationErrors.Add("Kayıt sırasında beklenmedik bir hata oluştu. Lütfen tekrar deneyin.");
            Console.WriteLine($"Kayıt Exception: {ex.ToString()}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}