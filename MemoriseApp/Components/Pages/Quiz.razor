@page "/quiz"
@*@attribute [Authorize] // Bu sayfaya sadece giriş yapmış kullanıcılar erişebilir *@
@rendermode InteractiveServer // Etkileşimli olmalı
@using MemoriseApp.Data
@using MemoriseApp.Models
@using MemoriseApp.Services
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims @* ClaimTypes için eklendi *@
@inject SrsService SrsService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<PageTitle>Kelime Sınavı</PageTitle>

<h3>Kelime Sınavı</h3>

@* Hata Mesajı Alanı *@
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">@errorMessage</div>
}

@* Yükleniyor Durumu *@
@if (isLoading)
{
    <p><em>Sınav yükleniyor...</em></p>
}
@* Sınav Bitti Durumu *@
else if (isQuizComplete)
{
    <div class="alert alert-success">
        <h4>Tebrikler!</h4>
        <p>Bu oturumdaki tüm kelimeleri tamamladınız.</p>
        <button class="btn btn-primary" @onclick="StartNewQuiz">Yeni Sınava Başla</button>
        <a href="/words/list" class="btn btn-secondary ms-2">Kelime Listesine Dön</a>
    </div>
}
@* Sınav Devam Ediyor Durumu *@
else if (currentWord != null)
{
    <div class="card shadow-sm">
        <div class="card-header">
            Kelime @(currentWordIndex + 1) / @quizWords.Count
        </div>
        <div class="card-body">
            @* Kelime Gösterme Alanı (Örn: İngilizce) *@
            <h4 class="card-title mb-3">@currentWord.EngWordName</h4>

            @* YENİ: Resim Gösterme Alanı (varsa) *@
            @if (!string.IsNullOrWhiteSpace(currentWord.PicturePath))
            {
                <div class="mb-3 text-center">
                    @* 
                        ÖNEMLİ NOT: currentWord.Picture yolunun web erişimine uygun olması gerekir.
                        Örneğin, resimler wwwroot altında bir klasörde (örn: wwwroot/images/word_pictures) olmalı
                        ve Picture alanında "/images/word_pictures/resim_adi.jpg" gibi bir değer saklanmalı.
                        "C://words/yeri.jpeg" gibi lokal dosya yolları doğrudan tarayıcıda çalışmaz.
                    *@
                    <img src="@currentWord.PicturePath" alt="Kelime Resmi" class="img-fluid rounded" style="max-height: 200px; max-width: 100%;" />
                </div>
            }

            @* YENİ: Örnek Cümleler Gösterme Alanı (varsa) *@
            @if (currentWord.WordSamples != null && currentWord.WordSamples.Any())
            {
                <div class="mb-3">
                    <h6>Örnek Cümleler:</h6>
                    <ul class="list-unstyled">
                        @foreach (var sample in currentWord.WordSamples)
                        {
                            <li><small class="text-muted">@sample.SampleSentence</small></li>
                        }
                    </ul>
                </div>
            }

            @* Cevap Giriş Alanı (Örn: Türkçe) *@
            <div class="mb-3">
                <label for="answerInput" class="form-label">Türkçe Karşılığı:</label>
                <InputText @bind-Value="userAnswer" class="form-control" id="answerInput" autocomplete="off" @oninput="ClearFeedback" disabled="@showFeedback" placeholder="Cevabınızı buraya yazın..." @ref="answerInputRef" />
            </div>

            @* Butonlar *@
            @if (!showFeedback)
            {
                <button class="btn btn-primary" @onclick="CheckAnswer" disabled="@string.IsNullOrWhiteSpace(userAnswer)">Kontrol Et</button>
            }

            @* Geri Bildirim Alanı *@
            @if (showFeedback)
            {
                @if (isAnswerCorrect)
                {
                    <div class="alert alert-success mt-3">Doğru!</div>
                }
                else
                {
                    <div class="alert alert-danger mt-3">
                        Yanlış! Doğru cevap: <strong>@currentWord.TurWordName</strong>
                    </div>
                }
                <button class="btn btn-secondary mt-2" @onclick="LoadNextWord">Sonraki Kelime</button>
            }
        </div>
    </div>
}
else // Başlangıçta veya kelime yüklenemediğinde (hata yoksa)
{
    <p><em>Sınav için kelime bulunamadı veya bir sorun oluştu.</em></p>
    <button class="btn btn-primary" @onclick="StartNewQuiz">Tekrar Dene</button>
}


@code {
    // Durum Değişkenleri
    private bool isLoading = true;
    private bool isQuizComplete = false;
    private string? errorMessage;
    private List<Word> quizWords = new List<Word>(); // Oturumdaki kelimeler
    private Word? currentWord; // Şu an gösterilen kelime
    private int currentWordIndex = -1; // Mevcut kelimenin indeksi
    private string? userId; // Giriş yapmış kullanıcının ID'si

    // Cevaplama ile İlgili Değişkenler
    private string userAnswer = string.Empty; // Kullanıcının girdiği cevap
    private bool showFeedback = false; // Doğru/Yanlış geri bildirimini göster
    private bool isAnswerCorrect = false; // Cevabın doğruluğu

    // Input alanına odaklanmak için referans
    private InputText? answerInputRef; // InputText için ElementReference kullanılmalı

    // Yaşam Döngüsü Metotları
    protected override async Task OnInitializedAsync()
    {
        await LoadQuizData();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Input görünür olduğunda ve odaklanmaya hazır olduğunda odaklan
        if (!isLoading && !isQuizComplete && currentWord != null && !showFeedback && answerInputRef?.Element.HasValue == true)
        {
            try
            {
                // answerInputRef.Element bir ElementReference? olduğu için .Value ile erişiyoruz.
                await answerInputRef.Element.Value.FocusAsync();
            }
            catch (Microsoft.JSInterop.JSException ex) // Özellikle JSInterop hatalarını yakalamak daha iyi olabilir
            {
                // Bu hata, element DOM'da henüz tam olarak hazır değilse veya görünür değilse oluşabilir.
                // Geliştirme sırasında konsola yazdırmak faydalı olabilir.
                Console.WriteLine($"Focus error (JSException): {ex.Message}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Focus error (General Exception): {ex.Message}");
            }
        }
    }


    // Yardımcı Metotlar
    private async Task LoadQuizData()
    {
        isLoading = true;
        isQuizComplete = false;
        errorMessage = null;
        quizWords.Clear();
        currentWord = null;
        currentWordIndex = -1;
        userAnswer = string.Empty;
        showFeedback = false;
        isAnswerCorrect = false;

        StateHasChanged(); // Yükleniyor durumunu göster

        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            if (user.Identity?.IsAuthenticated ?? false)
            {
                userId = user.FindFirstValue(ClaimTypes.NameIdentifier);
            }
            else
            {
                // GİRİŞ YAPILMADIYSA TEST AMAÇLI KULLANICI ID'Sİ
                // BU KISMI PRODUCTION'DA KALDIRIN VEYA YORUM SATIRI YAPIN
                userId = "TEST_USER_ID_FOR_QUIZ"; // Buraya test için bir kullanıcı ID'si atayabilirsiniz
                Console.WriteLine($"UYARI: Quiz sayfası için sabit test kullanıcı ID'si ({userId}) kullanılıyor.");
                // errorMessage = "Sınava devam etmek için giriş yapmalısınız.";
                // isLoading = false;
                // StateHasChanged();
                // return; // Giriş yapılmadıysa sınavı yükleme
            }

            if (string.IsNullOrEmpty(userId))
            {
                errorMessage = "Kullanıcı bilgisi alınamadı.";
                isLoading = false;
                StateHasChanged();
                return;
            }

            var reviewWords = await SrsService.GetWordsDueForReviewAsync(userId);
            int newWordCount = 5; // Bu değer ayarlardan veya sabit bir değerden gelebilir
            var newWords = await SrsService.GetNewWordsAsync(userId, newWordCount);

            quizWords.AddRange(reviewWords);
            quizWords.AddRange(newWords);

            if (!quizWords.Any())
            {
                isQuizComplete = true;
            }
            else
            {
                var random = new Random();
                quizWords = quizWords.OrderBy(x => random.Next()).ToList();
                LoadNextWordInternal();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Sınav yüklenirken bir hata oluştu: {ex.Message}";
            Console.WriteLine($"Quiz loading error: {ex.ToString()}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void CheckAnswer()
    {
        if (currentWord == null || string.IsNullOrWhiteSpace(userAnswer)) return;

        isAnswerCorrect = string.Equals(
            currentWord.TurWordName?.Trim(), // Nullable kontrolü eklendi
            userAnswer.Trim(),
            StringComparison.OrdinalIgnoreCase);

        showFeedback = true;

        _ = Task.Run(async () =>
        {
            if (!string.IsNullOrEmpty(userId) && currentWord != null) // currentWord null kontrolü eklendi
            {
                try
                {
                    await SrsService.ProcessAnswerAsync(userId, currentWord.WordID, isAnswerCorrect);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error processing answer in background: {ex.ToString()}");
                }
            }
        });

        StateHasChanged();
    }

    private void LoadNextWord()
    {
        LoadNextWordInternal();
        StateHasChanged();
        // Odaklanma OnAfterRenderAsync'te ele alınacak
    }

    private void LoadNextWordInternal()
    {
        showFeedback = false;
        userAnswer = string.Empty;
        currentWordIndex++;

        if (currentWordIndex < quizWords.Count)
        {
            currentWord = quizWords[currentWordIndex];
        }
        else
        {
            currentWord = null;
            isQuizComplete = true;
        }
    }

    private void ClearFeedback(ChangeEventArgs e)
    {
        if (showFeedback)
        {
            showFeedback = false;
            // StateHasChanged(); // Her tuş vuruşunda render'ı tetiklememek için kaldırılabilir
        }
    }

    private async Task StartNewQuiz()
    {
        await LoadQuizData();
    }
}