@page "/words/list"
@rendermode InteractiveServer
@using MemoriseApp.Data
@using MemoriseApp.Models
@using Microsoft.EntityFrameworkCore
@using System.IO
@using Microsoft.AspNetCore.Hosting
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager
@inject IWebHostEnvironment Environment     

<PageTitle>Kelime Listesi</PageTitle>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>Kelime Listesi</h2>
        <a href="/words/add" class="btn btn-primary">
            <i class="bi bi-plus-lg me-1"></i> @* Bootstrap İkonu *@ Yeni Kelime Ekle
        </a>
    </div>

    @* Hata Mesajı *@
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">@errorMessage</div>
    }

    @if (isLoading)
    {
        <div class="text-center my-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Yükleniyor...</span>
            </div>
            <p class="mt-2">Kelimeler yükleniyor...</p>
        </div>
    }
    else if (words == null || !words.Any())
    {
        <div class="alert alert-info text-center" role="alert">
            <i class="bi bi-info-circle-fill me-2"></i> @* Bootstrap İkonu *@
            Henüz kelime eklenmemiş. "Yeni Kelime Ekle" butonunu kullanarak başlayabilirsiniz.
        </div>
    }
    else
    {
        <div class="card">
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-hover table-striped mb-0">
                        <thead class="table-light">
                            <tr>
                                <th>İngilizce</th>
                                <th>Türkçe</th>
                                <th class="text-center">Resim</th>
                                <th class="text-center">İşlemler</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var word in words)
                            {
                                <tr>
                                    <td>@word.EngWordName</td>
                                    <td>@word.TurWordName</td>
                                    <td class="text-center">
                                        @if (!string.IsNullOrWhiteSpace(word.PicturePath)) // IsNullOrWhiteSpace kullanıldı
                                        {
                                            <i class="bi bi-check-circle-fill text-success" title="Resim Var"></i> @* Bootstrap İkonu *@
                                        }
                                        else
                                        {
                                            <i class="bi bi-x-circle-fill text-secondary" title="Resim Yok"></i> @* Bootstrap İkonu *@
                                        }
                                    </td>
                                    <td class="text-center">
                                        <a href="@($"/words/edit/{word.WordID}")" class="btn btn-sm btn-outline-primary me-2" title="Düzenle">
                                            <i class="bi bi-pencil-square"></i> @* Bootstrap İkonu *@
                                        </a>
                                        <button @onclick="() => ConfirmDelete(word)" class="btn btn-sm btn-outline-danger" title="Sil">
                                            <i class="bi bi-trash-fill"></i> @* Bootstrap İkonu *@
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }

    @* Silme Onay Modalı *@
    @if (showDeleteConfirm)
    {
        <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" tabindex="-1">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Kelimeyi Sil</h5>
                        <button type="button" class="btn-close" @onclick="CancelDelete" aria-label="Kapat"></button>
                    </div>
                    <div class="modal-body">
                        <p>
                            <strong>@wordToDelete?.EngWordName</strong> (@wordToDelete?.TurWordName) kelimesini silmek istediğinizden emin misiniz?
                            Bu işlem geri alınamaz.
                        </p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CancelDelete">İptal</button>
                        <button type="button" class="btn btn-danger" @onclick="DeleteWordConfirmed" disabled="@isDeleting">
                            @if (isDeleting)
                            {
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                <span class="visually-hidden">Siliniyor...</span>
                            }
                            else
                            {
                                <i class="bi bi-trash-fill me-1"></i> @* Silme ikonunu buraya da ekleyebiliriz *@
                                <span>Sil</span>
                            }
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    // @code bloğu öncekiyle aynı kalabilir, sadece ikon sınıfları değişti.
    private bool isLoading = true;
    private List<Word>? words;
    private string? errorMessage;
    private bool showDeleteConfirm = false;
    private Word? wordToDelete;
    private bool isDeleting = false;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        errorMessage = null;
        try
        {
            words = await DbContext.Words
                                   .OrderBy(w => w.EngWordName)
                                   .ToListAsync();
        }
        catch (Exception ex)
        {
            errorMessage = "Kelimeler yüklenirken bir hata oluştu.";
            Console.WriteLine($"Kelime listesi yükleme hatası: {ex.ToString()}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ConfirmDelete(Word word)
    {
        wordToDelete = word;
        showDeleteConfirm = true;
        isDeleting = false;
        errorMessage = null;
        StateHasChanged();
    }

    private void CancelDelete()
    {
        showDeleteConfirm = false;
        wordToDelete = null;
        isDeleting = false;
        StateHasChanged();
    }

    private async Task DeleteWordConfirmed()
    {
        if (wordToDelete == null) return;
        isDeleting = true;
        errorMessage = null;
        StateHasChanged();
        string? imagePathToDelete = wordToDelete.PicturePath;
        try
        {
            var samplesToDelete = await DbContext.WordSamples.Where(s => s.WordID == wordToDelete.WordID).ToListAsync();
            if (samplesToDelete.Any()) DbContext.WordSamples.RemoveRange(samplesToDelete);
            var progressToDelete = await DbContext.UserWordProgresses.Where(p => p.WordID == wordToDelete.WordID).ToListAsync();
            if (progressToDelete.Any()) DbContext.UserWordProgresses.RemoveRange(progressToDelete);

            DbContext.Words.Remove(wordToDelete);
            await DbContext.SaveChangesAsync();
            words?.Remove(wordToDelete);

            if (!string.IsNullOrEmpty(imagePathToDelete))
            {
                try
                {
                    var filePath = Path.Combine(Environment.WebRootPath, imagePathToDelete.TrimStart('/'));
                    if (File.Exists(filePath))
                    {
                        File.Delete(filePath);
                        Console.WriteLine($"Resim silindi: {filePath}");
                    }
                }
                catch (Exception fileEx)
                {
                    Console.WriteLine($"Resim dosyası silinirken hata ({imagePathToDelete}): {fileEx.Message}");
                }
            }
            CancelDelete();
        }
        catch (Exception ex)
        {
            errorMessage = "Kelime silinirken bir hata oluştu.";
            Console.WriteLine($"Kelime silme hatası (ID: {wordToDelete.WordID}): {ex.ToString()}");
            isDeleting = false;
            StateHasChanged();
        }
    }
}