@page "/words/edit/{WordId:int}" 
@rendermode InteractiveServer
@using MemoriseApp.Data
@using MemoriseApp.Models
@using Microsoft.EntityFrameworkCore
@using System.IO
@using Microsoft.AspNetCore.Hosting
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager
@inject IWebHostEnvironment Environment

<PageTitle>Kelime Düzenle</PageTitle>

<div class="container mt-4">
    <h2 class="mb-4">Kelime Düzenle</h2>

    @if (isLoading)
    {
        <p><em>Yükleniyor...</em></p>
    }
    else if (wordToEdit == null)
    {
        <div class="alert alert-warning">Düzenlenecek kelime bulunamadı. <a href="/words/list">Listeye Geri Dön</a></div>
    }
    else
    {
        <div class="card">
            <div class="card-body">
                <EditForm Model="@wordToEdit" OnValidSubmit="@HandleUpdateSubmit" FormName="EditWordForm">
                    <DataAnnotationsValidator />

                    <div class="mb-3">
                        <label for="englishWord" class="form-label">İngilizce Kelime</label>
                        <InputText @bind-Value="wordToEdit.EngWordName" class="form-control" id="englishWord" />
                        <ValidationMessage For="@(() => wordToEdit.EngWordName)" />
                    </div>

                    <div class="mb-3">
                        <label for="turkishWord" class="form-label">Türkçe Karşılığı</label>
                        <InputText @bind-Value="wordToEdit.TurWordName" class="form-control" id="turkishWord" />
                        <ValidationMessage For="@(() => wordToEdit.TurWordName)" />
                    </div>

                    <div class="mb-3">
                        <label for="exampleSentence" class="form-label">Örnek Cümle</label>
                        <InputTextArea @bind-Value="sampleSentence" class="form-control" id="exampleSentence" rows="3" />
                    </div>

                    @* --- GÜNCELLENMİŞ RESİM ALANI BAŞLANGICI --- *@
                    <div class="mb-3">
                        <label class="form-label fw-bold">Kelime Resmi</label>

                        @* Mevcut Resmi Gösterme ve Silme Butonu *@
                        <div class="mb-2">
                            @if (!string.IsNullOrEmpty(wordToEdit?.PicturePath))
                            {
                                <div class="position-relative d-inline-block border p-1 rounded" style="max-width: 250px;">
                                    <img src="@wordToEdit.PicturePath" class="img-fluid" style="max-height: 200px;" alt="Mevcut Resim: @wordToEdit.EngWordName" id="currentImage">
                                    <button type="button" class="btn btn-sm btn-danger position-absolute top-0 end-0 m-1 opacity-75"
                                            title="Bu resmi kaldır (Kaydet'e basınca silinecek)"
                                            @onclick="PrepareDeleteImage">
                                        <i class="bi bi-trash"></i> @* Font Awesome ikonu, projenizde varsa görünür *@
                                    </button>
                                </div>
                            }
                            else
                            {
                                <div class="text-muted p-2 border rounded" style="min-height: 50px; display:flex; align-items:center; justify-content:center;">
                                    <small>Bu kelime için mevcut resim yok veya kaldırıldı.</small>
                                </div>
                            }
                        </div>

                        @* Yeni Resim Seçme Alanı *@
                        <div class="mb-3">
                            <label for="imageUpload" class="form-label">
                                @if (!string.IsNullOrEmpty(wordToEdit?.PicturePath))
                                {
                                    <span>Yeni Resim Seç (Mevcut resmi değiştirmek için):</span>
                                }
                                else
                                {
                                    <span>Resim Seç:</span>
                                }
                            </label>
                            <InputFile OnChange="@LoadImage" class="form-control" id="imageUpload" accept=".jpg,.jpeg,.png,.gif" />
                        </div>

                        @* Yeni Seçilen Resmi Önizleme Alanı *@
                        @if (!string.IsNullOrEmpty(newImageDataUrl))
                        {
                            <div class="mb-3">
                                <label class="form-label">Yeni Resim Önizlemesi:</label>
                                <div>
                                    <img src="@newImageDataUrl" class="img-thumbnail" style="max-width: 200px; max-height: 200px;" alt="Yeni Resim Önizleme" />
                                </div>
                            </div>
                        }
                    </div>
                    @* --- GÜNCELLENMİŞ RESİM ALANI BİTİŞİ --- *@


                    @* Hata/Başarı Mesajları *@
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger mt-3" role="alert">@errorMessage</div>
                    }
                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success mt-3" role="alert">@successMessage</div>
                    }

                    <div class="d-flex justify-content-between mt-4">
                        <a href="/words/list" class="btn btn-secondary">İptal</a>
                        <button type="submit" class="btn btn-primary" disabled="@isLoading">Kaydet</button>
                    </div>
                </EditForm>
            </div>
        </div>

        @* Resim Silme Onay Modalı *@
        @if (showDeleteImageModal)
        {
            <div class="modal fade show" tabindex="-1" style="display:block; background-color: rgba(0,0,0,0.5);" role="dialog" aria-modal="true" aria-labelledby="deleteImageModalTitle">
                <div class="modal-dialog modal-dialog-centered">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="deleteImageModalTitle">Resmi Kaldırmayı Onayla</h5>
                            <button type="button" class="btn-close" @onclick="() => showDeleteImageModal = false" aria-label="Kapat"></button>
                        </div>
                        <div class="modal-body">
                            <p>"<strong>@wordToEdit?.EngWordName</strong>" kelimesine ait resmi kaldırmak istediğinizden emin misiniz?</p>
                            <p class="text-muted"><small>Bu işlem, siz "Kaydet" butonuna basana kadar kalıcı olmayacaktır.</small></p>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="() => showDeleteImageModal = false">İptal</button>
                            <button type="button" class="btn btn-warning" @onclick="ConfirmDeleteImage">Evet, Kaldır</button>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
</div>


@code {
    [Parameter]
    public int WordId { get; set; }

    private Word? wordToEdit;
    private string sampleSentence = string.Empty;
    // private string? currentImageUrl; // Artık doğrudan wordToEdit.PicturePath kullanılıyor
    private string? errorMessage;
    private string? successMessage;
    private bool isLoading = true;

    // --- Resim Yükleme için ---
    private IBrowserFile? selectedImageFile;
    private string? newImageDataUrl; // Yeni resim önizlemesi
    private byte[]? loadedFileBuffer; // Okunan dosya verisini saklamak için
    private readonly long maxFileSize = 1024 * 1024 * 5; // 5 MB
    private readonly string[] allowedExtensions = { ".jpg", ".jpeg", ".png", ".gif" };

    // --- Resim Silme için ---
    private bool showDeleteImageModal = false;
    private string? originalPicturePathBeforeEdit; // Sayfa yüklendiğinde veya başarılı bir kayıttan sonra orijinal yolu saklar

    protected override async Task OnParametersSetAsync()
    {
        isLoading = true;
        errorMessage = null;
        successMessage = null;
        wordToEdit = null;
        showDeleteImageModal = false; // Sayfa her yüklendiğinde modalı gizle
        // Resimle ilgili değişkenleri de sıfırlayalım
        selectedImageFile = null;
        newImageDataUrl = null;
        loadedFileBuffer = null;

        try
        {
            wordToEdit = await DbContext.Words.FindAsync(WordId);

            if (wordToEdit != null)
            {
                var firstSample = await DbContext.WordSamples
                                                 .FirstOrDefaultAsync(s => s.WordID == WordId);
                sampleSentence = firstSample?.SampleSentence ?? string.Empty;
                originalPicturePathBeforeEdit = wordToEdit.PicturePath; // Orijinal resim yolunu sakla
            }
            else
            {
                errorMessage = "Kelime bulunamadı.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Kelime bilgileri yüklenirken bir hata oluştu.";
            Console.WriteLine($"Kelime yükleme hatası (ID: {WordId}): {ex.ToString()}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadImage(InputFileChangeEventArgs e)
    {
        Console.WriteLine("LoadImage metodu başladı.");
        // selectedImageFile = null; // Zaten OnParametersSetAsync'te veya burada en başta sıfırlanabilir
        newImageDataUrl = null;
        errorMessage = null;
        loadedFileBuffer = null;
        // StateHasChanged(); // Bu genellikle metod sonunda yapılır

        if (e.FileCount == 0)
        {
            Console.WriteLine("Dosya seçilmedi, mevcut resim (varsa) kalır.");
            // Eğer kullanıcı dosya seçme penceresini iptal ederse,
            // selectedImageFile'ı null yapmak ve önizlemeyi temizlemek isteyebiliriz.
            selectedImageFile = null; // Seçimi iptal et
            // newImageDataUrl ve loadedFileBuffer zaten null
            StateHasChanged();
            return;
        }

        try
        {
            selectedImageFile = e.File;
            Console.WriteLine($"Dosya Adı: {selectedImageFile.Name}, Boyut: {selectedImageFile.Size}, Tip: {selectedImageFile.ContentType}");

            if (selectedImageFile.Size > maxFileSize)
            {
                errorMessage = $"Dosya boyutu çok büyük. Maksimum boyut: {maxFileSize / (1024 * 1024)} MB.";
                Console.WriteLine(errorMessage);
                selectedImageFile = null; loadedFileBuffer = null; StateHasChanged(); return;
            }

            var fileExtension = Path.GetExtension(selectedImageFile.Name).ToLowerInvariant();
            Console.WriteLine($"Dosya Uzantısı: {fileExtension}");
            if (!allowedExtensions.Contains(fileExtension))
            {
                errorMessage = $"Geçersiz dosya türü. İzin verilenler: {string.Join(", ", allowedExtensions)}";
                Console.WriteLine(errorMessage);
                selectedImageFile = null; loadedFileBuffer = null; StateHasChanged(); return;
            }

            loadedFileBuffer = new byte[selectedImageFile.Size];
            Console.WriteLine("Buffer oluşturuldu, dosya okunuyor...");
            using (var stream = selectedImageFile.OpenReadStream(maxFileSize))
            {
                int offset = 0;
                while (offset < loadedFileBuffer.Length)
                {
                    int bytesRead = await stream.ReadAsync(loadedFileBuffer, offset, loadedFileBuffer.Length - offset);
                    if (bytesRead == 0) break;
                    offset += bytesRead;
                }
                Console.WriteLine($"{offset} byte okundu ve loadedFileBuffer'a saklandı.");
            }

            newImageDataUrl = $"data:{selectedImageFile.ContentType};base64,{Convert.ToBase64String(loadedFileBuffer)}";
            Console.WriteLine($"newImageDataUrl oluşturuldu. Uzunluk: {newImageDataUrl.Length}");
            // Yeni resim seçildiğinde, kelimenin PicturePath'ini null yapmıyoruz,
            // HandleUpdateSubmit'te yeni resim kaydedilince güncellenecek.
            // Eğer kullanıcı resmi silmek istiyorsa, ConfirmDeleteImage'de PicturePath null yapılacak.
        }
        catch (Exception ex)
        {
            errorMessage = $"Yeni resim seçilirken bir hata oluştu: {ex.Message}";
            Console.WriteLine($"HATA - Yeni resim seçme: {ex.ToString()}");
            selectedImageFile = null; newImageDataUrl = null; loadedFileBuffer = null;
        }
        finally
        {
            StateHasChanged(); // Tüm değişiklikleri UI'a yansıt
        }
    }

    private void PrepareDeleteImage()
    {
        if (wordToEdit != null && !string.IsNullOrEmpty(wordToEdit.PicturePath))
        {
            showDeleteImageModal = true;
        }
    }

    private void ConfirmDeleteImage()
    {
        showDeleteImageModal = false; // Modalı kapat
        if (wordToEdit != null)
        {
            // Sadece modeldeki yolu null yap ve UI'ı güncelle
            // Fiziksel silme ve DB kaydı HandleUpdateSubmit'e bırakılacak
            wordToEdit.PicturePath = null;
            newImageDataUrl = null;   // Yeni resim önizlemesini de temizle (eğer varsa)
            selectedImageFile = null; // Yeni dosya seçimini de iptal et (eğer varsa)
            loadedFileBuffer = null;  // Buffer'ı da temizle
            successMessage = "Resim kaldırılmak üzere işaretlendi. Değişikliği tamamlamak için 'Kaydet'e basın.";
            errorMessage = null;
            StateHasChanged();
        }
    }

    private async Task HandleUpdateSubmit()
    {
        if (wordToEdit == null)
        {
            errorMessage = "Düzenlenecek kelime bulunamadı.";
            return;
        }

        isLoading = true;
        successMessage = null;
        errorMessage = null;
        StateHasChanged();

        Console.WriteLine($"HandleUpdateSubmit BAŞLADI - isLoading başlangıç: {isLoading}");
        Console.WriteLine($"Mevcut PicturePath: {wordToEdit.PicturePath}, Orijinal PicturePath: {originalPicturePathBeforeEdit}");
        Console.WriteLine($"selectedImageFile: {(selectedImageFile != null ? selectedImageFile.Name : "null")}, loadedFileBuffer dolu mu: {loadedFileBuffer != null}");


        // Mükerrer Kontrolü
        string lowerEngWord = wordToEdit.EngWordName.ToLower();
        string lowerTurWord = wordToEdit.TurWordName.ToLower();
        bool duplicateExists = await DbContext.Words
                                              .AnyAsync(w => w.WordID != wordToEdit.WordID &&
                                                             (w.EngWordName.ToLower() == lowerEngWord ||
                                                              w.TurWordName.ToLower() == lowerTurWord));
        if (duplicateExists)
        {
            errorMessage = "Girdiğiniz İngilizce veya Türkçe kelimelerden biri başka bir kayıtta zaten mevcut.";
            isLoading = false; StateHasChanged(); return;
        }

        string? physicalPathToDelete = null; // Fiziksel olarak silinecek dosyanın yolu
        string? newUploadedPath = null;      // Yeni yüklenen dosyanın veritabanına kaydedilecek yolu

        // Durum 1: Yeni bir resim seçilmiş ve yüklenmiş
        if (selectedImageFile != null && loadedFileBuffer != null)
        {
            Console.WriteLine("Yeni resim yükleme işlemi başlıyor.");
            // Eğer daha önce bir resim vardıysa (ve bu yeni resimle değiştiriliyorsa), eskisini silmek üzere işaretle
            if (!string.IsNullOrEmpty(originalPicturePathBeforeEdit))
            {
                physicalPathToDelete = originalPicturePathBeforeEdit;
                Console.WriteLine($"Eski resim ({physicalPathToDelete}) silinmek üzere işaretlendi (yeni resim yükleniyor).");
            }

            try
            {
                var uploadsFolder = Path.Combine(Environment.WebRootPath, "uploads", "images");
                if (!Directory.Exists(uploadsFolder)) Directory.CreateDirectory(uploadsFolder);

                var uniqueFileName = Guid.NewGuid().ToString() + Path.GetExtension(selectedImageFile.Name);
                var filePath = Path.Combine(uploadsFolder, uniqueFileName);

                await File.WriteAllBytesAsync(filePath, loadedFileBuffer); // Saklanan buffer'ı kullan

                newUploadedPath = $"/uploads/images/{uniqueFileName}";
                wordToEdit.PicturePath = newUploadedPath; // Modeldeki yolu yeni resimle güncelle
                Console.WriteLine($"Yeni resim (buffer'dan) kaydedildi: {filePath}");
            }
            catch (Exception ex)
            {
                errorMessage = $"Yeni resim kaydedilirken bir hata oluştu: {ex.Message}";
                Console.WriteLine($"Yeni resim kaydetme hatası: {ex.ToString()}");
                isLoading = false; StateHasChanged(); return;
            }
        }
        // Durum 2: Yeni resim seçilmemiş AMA mevcut resmin silinmesi istenmiş
        // (ConfirmDeleteImage'de wordToEdit.PicturePath null yapılmıştı)
        else if (selectedImageFile == null && wordToEdit.PicturePath == null && !string.IsNullOrEmpty(originalPicturePathBeforeEdit))
        {
            Console.WriteLine("Mevcut resmin silinmesi işlemi başlıyor.");
            physicalPathToDelete = originalPicturePathBeforeEdit;
            // wordToEdit.PicturePath zaten null durumda.
            Console.WriteLine($"Eski resim ({physicalPathToDelete}) silinmek üzere işaretlendi (kullanıcı sildi).");
        }
        // Durum 3: Resimle ilgili bir değişiklik yok (ne yeni resim var ne de silme isteği)
        // Bu durumda wordToEdit.PicturePath orijinal değeriyle kalır (originalPicturePathBeforeEdit).

        try
        {
            // Örnek Cümleyi Güncelle
            var existingSample = await DbContext.WordSamples.FirstOrDefaultAsync(s => s.WordID == wordToEdit.WordID);
            if (existingSample != null)
            {
                if (string.IsNullOrWhiteSpace(sampleSentence))
                { DbContext.WordSamples.Remove(existingSample); }
                else if (existingSample.SampleSentence != sampleSentence)
                { existingSample.SampleSentence = sampleSentence; DbContext.WordSamples.Update(existingSample); }
            }
            else if (!string.IsNullOrWhiteSpace(sampleSentence))
            { DbContext.WordSamples.Add(new WordSample { WordID = wordToEdit.WordID, SampleSentence = sampleSentence }); }

            DbContext.Words.Update(wordToEdit);
            await DbContext.SaveChangesAsync(); // Önce veritabanı değişikliklerini kaydet

            // Veritabanı kaydı başarılıysa, işaretlenen fiziksel dosyayı sil
            if (!string.IsNullOrEmpty(physicalPathToDelete))
            {
                try
                {
                    var fullPath = Path.Combine(Environment.WebRootPath, physicalPathToDelete.TrimStart('/'));
                    if (File.Exists(fullPath))
                    {
                        File.Delete(fullPath);
                        Console.WriteLine($"Fiziksel dosya başarıyla silindi: {fullPath}");
                    }
                    else
                    {
                        Console.WriteLine($"Silinecek fiziksel dosya bulunamadı (zaten silinmiş olabilir): {fullPath}");
                    }
                }
                catch (Exception ex)
                {
                    // Fiziksel dosya silme hatasını logla ama kullanıcıya göstermeyebiliriz, DB kaydı zaten yapıldı.
                    Console.WriteLine($"Fiziksel dosya silinirken hata oluştu ({physicalPathToDelete}): {ex.ToString()}");
                }
            }

            successMessage = "Kelime başarıyla güncellendi.";
            originalPicturePathBeforeEdit = wordToEdit.PicturePath; // Bir sonraki düzenleme için orijinal yolu güncelle
            // UI temizleme
            selectedImageFile = null;
            newImageDataUrl = null;
            loadedFileBuffer = null;
        }
        catch (DbUpdateException dbEx)
        {
            errorMessage = $"Veritabanı güncelleme hatası: {dbEx.InnerException?.Message ?? dbEx.Message}";
            Console.WriteLine($"Veritabanı güncelleme hatası: {dbEx.ToString()}");
            // Hata durumunda, eğer PicturePath'i değiştirmiştik ama DB'ye yansıtamadıysak,
            // belki originalPicturePathBeforeEdit'e geri döndürmek gerekebilir (kullanıcı deneyimi için).
            // Şimdilik bu kadar detaylandırmayalım.
        }
        catch (Exception ex)
        {
            errorMessage = $"Kelime güncellenirken bir hata oluştu: {ex.Message}";
            Console.WriteLine($"Kelime güncelleme hatası: {ex.ToString()}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
            if (string.IsNullOrEmpty(errorMessage) && !string.IsNullOrEmpty(successMessage))
            {
                await Task.Delay(1500); // Mesajın görünmesi için kısa bir bekleme
                NavigationManager.NavigateTo("/words/list");
            }
        }
    }
}